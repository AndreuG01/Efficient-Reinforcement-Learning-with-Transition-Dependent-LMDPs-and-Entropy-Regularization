import matplotlib.pyplot as plt

class CustomPalette:
    """
    Represents a custom color palette with a set of predefined static HEX color constants (names generated by ChatGPT).
    It has been done to keep the plots with consistent colors (which I like more than the default from matplotlib :-) )  for the report.

    Attributes:
        __colors (list[str]): A list with all the possible colors that the custom palette supports, represented as class constants.
            - BLACK (str): "#000000"
            - GRAY (str): "#2C2C2C"
            - DEEP_CRISMON (str): "#4F0000"
            - DARK_RED (str): "#790000"
            - RED (str): "#FF0000"
            - ORANGE_RED (str): "#FF4500"
            - TOMATO (str): "#FF6347"
            - DARK_ORANGE (str): "#FF8C00"
            - ORANGE (str): "#FFA500"
            - GOLD (str): "#FFD700"
            - YELLOW (str): "#FFFF00"
            - YELLOW_GREEN (str): "#9ACD32"
            - GREEN (str): "#00FF00"
            - MEDIUM_GREEN (str): "#00FA9A"
            - DARK_TURQUOISE (str): "#00CED1"
            - DODGER_BLUE (str): "#1E90FF"
            - BLUE (str): "#0000FF"
            - DARK_VIOLET (str): "#9400D3"
            - MAGENTA (str): "#FF00FF"
    """
    BLACK = "#000000"
    GRAY = "#2C2C2C"
    DEEP_CRISMON = "#4F0000"
    DARK_RED = "#790000"
    RED = "#FF0000"
    ORANGE_RED = "#FF4500"
    TOMATO = "#FF6347"
    DARK_ORANGE = "#FF8C00"
    ORANGE = "#FFA500"
    GOLD = "#FFD700"
    YELLOW = "#FFFF00"
    YELLOW_GREEN = "#9ACD32"
    GREEN = "#00FF00"
    MEDIUM_GREEN = "#00FA9A"
    DARK_TURQUOISE = "#00CED1"
    DODGER_BLUE = "#1E90FF"
    BLUE = "#0000FF"
    DARK_VIOLET = "#9400D3"
    MAGENTA = "#FF00FF"
    
    def __init__(self):
        """
        Initializes a CustomPalette instance by collecting all HEX color values from class attributes.
        """
        self.__colors = [
            value for key, value in vars(self.__class__).items()
            if isinstance(value, str) and value.startswith("#")
        ]
    
    
    def __len__(self):
        """
        Returns the number of colors in the palette.

        Returns:
            int: The total number of HEX colors available.
        """
        return len(self.__colors)
    
    def __getitem__(self, index):
        """
        Retrieves a color from the palette by index.

        Args:
            index (int): The position of the desired color.

        Returns:
            str: The HEX code corresponding to the given index.
        """
        return self.__colors[index]


    def plot(self, savefig: bool = False):
        """
        Plots the color palette as vertical bars to show the colors that it contains.

        Args:
            savefig (bool, optional): If True, saves the plot to 'palette.png'. If False, displays the plot. Defaults to False.
        """
        fig, ax = plt.subplots(figsize=(10, 2))
        n_colors = len(self.__colors)
        
        for i, color in enumerate(self.__colors):
            ax.add_patch(plt.Rectangle((i, 0), 1, 1, color=color))
            ax.text(i + 0.5, 0.5, f"{i+1}", ha='center', va='center', fontsize=10, color='black', weight='bold')
        
        plt.xlim(0, n_colors)
        plt.ylim(0, 1)
        plt.xticks([])
        plt.yticks([])
        
        if savefig:
            plt.savefig("palette.png", dpi=300, bbox_inches="tight")
        else:
            plt.show()

if __name__ == "__main__":
    palette = CustomPalette()
    palette.plot(savefig=True)